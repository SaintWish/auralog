// Copyright 2009 The Go Authors.
// Package modifed by SaintWish(https://github.com/SaintWish)
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package auralog is a modified Go log package with
// level logging and RotateWriter to automatically rotate log files.
// Also included a config struct to make creating a new logger cleaner,
// and the helper functions have been removed.
// The different levels are the below constants.
package auralog

import (
  "fmt"
  "io"
  "os"
  "runtime"
  "sync"
  "time"
)

type LogLevel int

// Constants for log levels.
//  LogLevelInfo - Prints only info logs.
//  LogLevelWarn - Prints info and warn logs.
//  LogLevelError - Prints info, warn, and error logs.
//  LogLevelFatal - Prints info, warn, error, fatal logs.
//  LogLevelPanic - Prints info, warn, error, fatal, panic logs.
//  LogLevelDebug - Prints info, warn, error, fatal, panic, debug logs.
const (
  LogLevelInfo LogLevel = iota
  LogLevelWarn
  LogLevelError
  LogLevelFatal
  LogLevelPanic
  LogLevelDebug
)

// LogLevel.String returns the LogLevel string.
//  Example: LogLevelWarn.String() will return "WARN: " string.
func (l LogLevel) String() string {
  return [7]string{"INFO: ", "WARN: ", "ERROR: ", "FATAL: ", "PANIC: ", "DEBUG: "}[l]
}

// ToLogLevel(level string) return the log level constant from a string.
//   Example: ToLogLevel("warn") will return LogLevelWarn constant.
func ToLogLevel(level string) LogLevel {
  switch(level) {
  case "info":
    return LogLevelInfo
  case "warn":
    return LogLevelWarn
  case "error":
    return LogLevelError
  case "fatal":
    return LogLevelFatal
  case "panic":
    return LogLevelPanic
  case "debug":
    return LogLevelDebug
  default:
    return LogLevelError
  }
}

// These flags define which text to prefix to each log entry generated by the Logger.
// Bits are or'ed together to control what's printed.
// With the exception of the Lmsgprefix flag, there is no
// control over the order they appear (the order listed here)
// or the format they present (as described in the comments).
// The prefix is followed by a colon only when Llongfile or Lshortfile
// is specified.
// For example, flags Ldate | Ltime (or LstdFlags) produce,
//  2009/01/23 01:23:23 message
// while flags Ldate | Ltime | Lmicroseconds | Llongfile produce,
//  2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
const (
  Ldate = 1 << iota // the date in the local time zone: 2009/01/23
  Ltime // the time in the local time zone: 01:23:23
  Lmicroseconds // microsecond resolution: 01:23:23.123123.  assumes Ltime.
  Llongfile // full file name and line number: /a/b/c/d.go:23
  Lshortfile // final file name element and line number: d.go:23. overrides Llongfile
  LUTC // if Ldate or Ltime is set, use UTC rather than the local time zone
  Lmsgprefix // move the "prefix" from the beginning of the line to before the message
  LstdFlags = Ldate | Ltime // initial values for the standard logger
)

// A structure for cleaner code when initalizing Logger struct.
type Config struct {
  Output io.Writer // io.Writer of what to log to.
  Prefix string // prefix on each line to identify the logger (but see Lmsgprefix)
  Level LogLevel // What log level should be print.

  Flag int
  WarnFlag int // Required, flags for warn log.
  ErrorFlag int // Required, flags for error, fatal, and panic logs.
  DebugFlag int // Required, flags for debug logs.
}

// Cheap integer to fixed-width decimal ASCII. Give a negative width to avoid zero-padding.
func itoa(buf *[]byte, i int, wid int) {
  // Assemble decimal in reverse order.
  var b [20]byte
  bp := len(b) - 1
  for i >= 10 || wid > 1 {
    wid--
    q := i / 10
    b[bp] = byte('0' + i - q*10)
    bp--
    i = q
  }
  // i < 10
  b[bp] = byte('0' + i)
  *buf = append(*buf, b[bp:]...)
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer. Each logging operation makes a single call to
// the Writer's Write method. A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
  filename string
  dir string
  prefix string
  loglevel LogLevel

  flag int
  warflag int
  errflag int
  debflag int

  mu sync.Mutex // ensures atomic writes; protects the following fields
  out io.Writer // destination for output
  buf []byte // for accumulating text to write
}

// New creates a new Logger. The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line, or
// after the log header if the Lmsgprefix flag is provided.
// The flag argument defines the logging properties.
func New(c Config) *Logger {
  return &Logger{
    out: c.Output,
    prefix: c.Prefix,
    flag: c.Flag,
    loglevel: c.Level,
    errflag: c.ErrorFlag,
    warflag: c.WarnFlag,
    debflag: c.DebugFlag,
  }
}

// SetOutput sets the output destination for the logger.
func (l *Logger) SetOutput(w io.Writer) {
  l.mu.Lock()
  defer l.mu.Unlock()
  l.out = w
}

// formatHeader writes log header to buf in following order:
//   * l.prefix (if it's not blank and Lmsgprefix is unset),
//   * date and/or time (if corresponding flags are provided),
//   * file and line number (if corresponding flags are provided),
//   * l.prefix (if it's not blank and Lmsgprefix is set).
// runtime.Caller is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2. It was moved to this function because we don't have to
// do another switch case so it saves on calls.
func (l *Logger) formatHeader(buf *[]byte, t time.Time, level LogLevel) {
  var flag int
  var line int
  var file string

  switch level {
  case LogLevelInfo:
    flag = l.flag
  case LogLevelWarn:
    flag = l.warflag
  case LogLevelError:
    flag = l.errflag
  case LogLevelFatal:
    flag = l.errflag
  case LogLevelPanic:
    flag = l.errflag
  case LogLevelDebug:
    flag = l.debflag
  }

  if flag&Lmsgprefix == 0 {
    *buf = append(*buf, l.prefix...)
  }

  // Append the log level string.
  *buf = append(*buf, level.String()...)

  // Handle time flags
  if flag&(Ldate|Ltime|Lmicroseconds) != 0 {
    if flag&LUTC != 0 {
      t = t.UTC()
    }

    if flag&Ldate != 0 {
      year, month, day := t.Date()
      itoa(buf, year, 4)
      *buf = append(*buf, '/')
      itoa(buf, int(month), 2)
      *buf = append(*buf, '/')
      itoa(buf, day, 2)
      *buf = append(*buf, ' ')
    }

    if flag&(Ltime|Lmicroseconds) != 0 {
      hour, min, sec := t.Clock()
      itoa(buf, hour, 2)
      *buf = append(*buf, ':')
      itoa(buf, min, 2)
      *buf = append(*buf, ':')
      itoa(buf, sec, 2)
      if flag&Lmicroseconds != 0 {
        *buf = append(*buf, '.')
        itoa(buf, t.Nanosecond()/1e3, 6)
      }
      *buf = append(*buf, ' ')
    }
  }

  // Get file and line from stack.
  if flag&(Lshortfile|Llongfile) != 0 {
    // Release lock while getting caller info - it's expensive.
    l.mu.Unlock()
    var ok bool
    _, file, line, ok = runtime.Caller(3)
    if !ok {
      file = "???"
      line = 0
    }
    l.mu.Lock()
  }

  // Handle file info flags.
  if flag&(Lshortfile|Llongfile) != 0 {
    if flag&Lshortfile != 0 {
      short := file
      for i := len(file) - 1; i > 0; i-- {
        if file[i] == '/' {
          short = file[i+1:]
          break
        }
      }
      file = short
    }
    *buf = append(*buf, file...)
    *buf = append(*buf, ':')
    itoa(buf, line, -1)
    *buf = append(*buf, ": "...)
  }

  if flag&Lmsgprefix != 0 {
    *buf = append(*buf, l.prefix...)
  }
}

// Output writes the output for a logging event. The string s contains
// the text to print after the prefix specified by the flags of the
// Logger. A newline is appended if the last character of s is not already a newline.
func (l *Logger) Output(level LogLevel, s string) error {
  now := time.Now() // get this early.

  l.mu.Lock()
  defer l.mu.Unlock()

  l.buf = l.buf[:0]
  l.formatHeader(&l.buf, now, level)
  l.buf = append(l.buf, s...)
  if len(s) == 0 || s[len(s)-1] != '\n' {
    l.buf = append(l.buf, '\n')
  }
  _, err := l.out.Write(l.buf)
  return err
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Printf(format string, v ...interface{}) {
  l.Output(LogLevelInfo, fmt.Sprintf(format, v...))
}

// Print calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Print(v ...interface{}) {
  l.Output(LogLevelInfo, fmt.Sprint(v...))
}

// Println calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Println(v ...interface{}) {
  l.Output(LogLevelInfo, fmt.Sprintln(v...))
}

// Warn level logging.
// Warnf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Warnf(format string, v ...interface{}) {
  if l.loglevel >= LogLevelWarn { l.Output(LogLevelWarn, fmt.Sprintf(format, v...)) }
}

// Warn level logging.
// Warn calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Warn(v ...interface{}) {
  if l.loglevel >= LogLevelWarn { l.Output(LogLevelWarn, fmt.Sprint(v...)) }
}

// Warn level logging.
// Warnln calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Warnln(v ...interface{}) {
  if l.loglevel >= LogLevelWarn { l.Output(LogLevelWarn, fmt.Sprintln(v...)) }
}

// Error level logging.
// Errorf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Errorf(format string, v ...interface{}) {
  if l.loglevel >= LogLevelError { l.Output(LogLevelError, fmt.Sprintf(format, v...)) }
}

// Error level logging.
// Error calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Print.
func (l *Logger) Error(v ...interface{}) {
  if l.loglevel >= LogLevelError { l.Output(LogLevelError, fmt.Sprint(v...)) }
}

// Error level logging.
// Errorln calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Println.
func (l *Logger) Errorln(v ...interface{}) {
  if l.loglevel >= LogLevelError { l.Output(LogLevelError, fmt.Sprintln(v...)) }
}

// Fatalf is equivalent to l.Printf() followed by a call to os.Exit(1).
func (l *Logger) Fatalf(format string, v ...interface{}) {
  if l.loglevel >= LogLevelFatal { l.Output(LogLevelFatal, fmt.Sprintf(format, v...)) }
  os.Exit(1)
}

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *Logger) Fatal(v ...interface{}) {
  if l.loglevel >= LogLevelFatal { l.Output(LogLevelFatal, fmt.Sprint(v...)) }
  os.Exit(1)
}

// Fatalln is equivalent to l.Println() followed by a call to os.Exit(1).
func (l *Logger) Fatalln(v ...interface{}) {
  if l.loglevel >= LogLevelFatal { l.Output(LogLevelFatal, fmt.Sprintln(v...)) }
  os.Exit(1)
}

// Panic is equivalent to l.Print() followed by a call to panic().
func (l *Logger) Panic(v ...interface{}) {
  s := fmt.Sprint(v...)
  if l.loglevel >= LogLevelPanic { l.Output(LogLevelPanic, s) }
  l.Output(LogLevelPanic, s)
  panic(s)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panicf(format string, v ...interface{}) {
  s := fmt.Sprintf(format, v...)
  if l.loglevel >= LogLevelPanic { l.Output(LogLevelPanic, s) }
  panic(s)
}

// Panicln is equivalent to l.Println() followed by a call to panic().
func (l *Logger) Panicln(v ...interface{}) {
  s := fmt.Sprintln(v...)
  if l.loglevel >= LogLevelPanic { l.Output(LogLevelPanic, s) }
  panic(s)
}

// Debug level logging.
// Debugf is equivalent to l.Printf()
func (l *Logger) Debugf(format string, v ...interface{}) {
  if l.loglevel >= LogLevelDebug { l.Output(LogLevelDebug, fmt.Sprintf(format, v...)) }
}

// Debug level logging.
// Debug is equivalent to l.Print()
func (l *Logger) Debug(v ...interface{}) {
  if l.loglevel >= LogLevelDebug { l.Output(LogLevelDebug, fmt.Sprint(v...)) }
}

// Debug level logging.
// Debugln is equivalent to l.Println()
func (l *Logger) Debugln(v ...interface{}) {
  if l.loglevel >= LogLevelDebug { l.Output(LogLevelDebug, fmt.Sprintln(v...)) }
}

// Flags returns the output flags for the logger.
// The flag bits are Ldate, Ltime, and so on.
func (l *Logger) Flags() int {
  l.mu.Lock()
  defer l.mu.Unlock()
  return l.flag
}

// SetFlags sets the output flags for the logger.
// The flag bits are Ldate, Ltime, and so on.
func (l *Logger) SetFlags(flag int) {
  l.mu.Lock()
  defer l.mu.Unlock()
  l.flag = flag
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix() string {
  l.mu.Lock()
  defer l.mu.Unlock()
  return l.prefix
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(prefix string) {
  l.mu.Lock()
  defer l.mu.Unlock()
  l.prefix = prefix
}

// Writer returns the output destination for the logger.
func (l *Logger) Writer() io.Writer {
  l.mu.Lock()
  defer l.mu.Unlock()
  return l.out
}
